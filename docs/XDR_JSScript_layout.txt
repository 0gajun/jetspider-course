## XDRFunctionレイアウト

XDRScriptのレイアウトに以下のヘッダーが追加される。

uint32	firstWord
		0b0001	atom（関数名）を持つ
		0b0010	wrapper: この関数はバイトコードがリライトされた最適化済み関数のラッパーである。prototypeに本体が入っている。ラッパーはXDRで書き出せないので、常にオフにしておくべきか。
		3ビット目から16ビット分はskipmin
			skipmin: net skip amount up (toward zero) from script->staticLevel to nearest upvar, including upvars in nested functions
			なんだかよくわからないがnull closureでskipmin != 0だとwrapperが必要っぽい (JSFunction::needsWrapper) ので、0にしておくか
JSAtom	atom	関数名。firstWordの最下位ビットが1のときのみ存在
uint32	flagsWord
	uint16 flags	JSFunction->flags
		// jsfun.h
		0x0001	JSFUN_JOINABLE			null closureであり、グローバルに参照されていない（inline化可能ってことかな）
		0x0800	JSFUN_PROTOTYPE		なにかのprototypeになってる
		0x1000	JSFUN_EXPR_CLOSURE	expression closure（stmt closureと何が違うんだろう…）
		0x2000	JSFUN_TRCINFO			ネイティブコードのトレース情報を持ってる？ぽい
		0x4000	JSFUN_INTERPRETED		非ネイティブコード（バイトコード）。バイトコードを送り込むなら常にセット
		0x8000	JSFUN_FLAT_CLOSURE		"display" closure ??
		0xC000	JSFUN_NULL_CLOSEURE	uplinkない（combinator）
		0xC000	JSFUN_KINDMASK
	uint16 nargs	パラメーターの数
JSScript	script	本体

## XDRScriptレイアウト

uint32	magic
uint32	argsVars
	uint16 nVars
	uint16 nArgs
uint32	paddingUpVers
	uint16 nUpVars
	uint16 padding (== 0)
uint32[]	bitmap
		args, vars, upvars のうち、名前のあるインデックスが 1 になってる。
		LSBがインデックス0で、変数32個ぶんを1ワードに詰め込む。変数の総個数に応じて可変長。
JSString[]	names
uint32	length	バイトコード長
uint32	prologLength	プロローグ長（codeからmainまで）
uint32	version
	uint16 version		こっちが本当のバージョン。JavaScriptバージョン。
	uint16 n_fixed		ローカル変数の数。フレームのslots（VMスタック）の底に保存される
uint32	n_atoms		atomMap.length
uint32	n_srcnotes	lambdaがあると使われるっぽい
uint32	n_trynotes	例外のブレークポイントかける位置が記録されるっぽい
uint32	n_objects		ブロック・lambdaの数
uint32	n_regexps	正規表現リテラルオブジェクトの数
uint32	n_consts		定数の数
uint32	encodedCloseCount
	uint16 n_closed_vars	closed overなlvarとargの数らしいのだがclosedの意味がわからん。関数の外に出てない？
	uint16 n_closed_args
uint32	scriptBits	ビットフラグ
	下から
	bit noScriptRval	return valueがないときtrue
	bit savedCallerFun
	bit HasSharps		なんかobsoleteっぽい機能のオンオフ。オフ固定としておこう
	bit StrictModeCode		strictモードのオンオフ。オフ固定にしておく
	bit UsesEval
	bit UsesArguments		引数が存在するか？でいいのかな？トップレベルはfalseとして、引数なしの関数はどうなるんだろ
byte[]	code		バイトコード
char[][]	srcnotes		lambdaのソースコードとか。最後の1個はターミネーター
char[]	filename		ソースコード名
uint32	lineno		開始行番号
uint32	n_slots
	uint16 n_slots		(vars + max stack depth) うっ スタックの深さ計算しないといけないのか
	uint16 staticLevel	静的な関数のネストレベル。トップレベルが 0、トップレベルの関数が 1
uint32	encodable	principalsのシリアライザがあるときtrue ?
uint32	principals		encodableのときだけ出力される
JSString[]	atoms		script.atomMap.vector
{
	uint32 isBlock		ブール値 (0 or 1)
	JSObject[] lambda	isBlockならJSBlock、そうでなければJSFunction
}[]
uint32[]	upVars		script->upvars()->vector[i]
JSRegExp[] regexps	script->regexps()->vector[i]
uint32[]	closedSlots	script->closedSlots[i]
uint32[]	closedVars	script->closedSlots[nClosedArgs + i]
jstrynote[]		trynotes	script->trynotes()

## JSString
uint32	length
char[]	str

## JSAtom (JSString) の構造
RubyのSymbolみたいなやつ。
XDRによるシリアライズはJSString扱い。

lengthAndFlags
下4ビットはフラグ。長さは len<<4 されてる
下2ビットはtypeフラグ
0b0000: FLAT: 文字データはJSStringに埋め込まれている
0b0001: DEPENDENT: ?
0b0010: ROPE: ロープ。連結リスト

次の2ビットはtype=FLATのとき有効
0b0100: ATOMIZED: JSAtomになってる (internされてるということか)
0b1000: EXTENSIBLE: ?
