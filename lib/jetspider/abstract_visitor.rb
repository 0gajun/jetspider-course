require 'jetspider/ast'

module JetSpider
  class AbstractVisitor < AstVisitor
    def visit_EmptyStatementNode(n) raise "EmptyStatementNode not implemented"; end
    def visit_ParentheticalNode(n) raise "ParentheticalNode not implemented"; end
    def visit_ExpressionStatementNode(n) raise "ExpressionStatementNode not implemented"; end
    def visit_TrueNode(n) raise "TrueNode not implemented"; end
    def visit_DeleteNode(n) raise "DeleteNode not implemented"; end
    def visit_ReturnNode(n) raise "ReturnNode not implemented"; end
    def visit_TypeOfNode(n) raise "TypeOfNode not implemented"; end
    def visit_SourceElementsNode(n) raise "SourceElementsNode not implemented"; end
    def visit_NumberNode(n) raise "NumberNode not implemented"; end
    def visit_LogicalNotNode(n) raise "LogicalNotNode not implemented"; end
    def visit_AssignExprNode(n) raise "AssignExprNode not implemented"; end
    def visit_FunctionBodyNode(n) raise "FunctionBodyNode not implemented"; end
    def visit_ObjectLiteralNode(n) raise "ObjectLiteralNode not implemented"; end
    def visit_UnaryMinusNode(n) raise "UnaryMinusNode not implemented"; end
    def visit_ThrowNode(n) raise "ThrowNode not implemented"; end
    def visit_ThisNode(n) raise "ThisNode not implemented"; end
    def visit_BitwiseNotNode(n) raise "BitwiseNotNode not implemented"; end
    def visit_ElementNode(n) raise "ElementNode not implemented"; end
    def visit_StringNode(n) raise "StringNode not implemented"; end
    def visit_ArrayNode(n) raise "ArrayNode not implemented"; end
    def visit_CaseBlockNode(n) raise "CaseBlockNode not implemented"; end
    def visit_NullNode(n) raise "NullNode not implemented"; end
    def visit_BreakNode(n) raise "BreakNode not implemented"; end
    def visit_ParameterNode(n) raise "ParameterNode not implemented"; end
    def visit_BlockNode(n) raise "BlockNode not implemented"; end
    def visit_FalseNode(n) raise "FalseNode not implemented"; end
    def visit_VoidNode(n) raise "VoidNode not implemented"; end
    def visit_RegexpNode(n) raise "RegexpNode not implemented"; end
    def visit_ArgumentsNode(n) raise "ArgumentsNode not implemented"; end
    def visit_AttrNode(n) raise "AttrNode not implemented"; end
    def visit_ContinueNode(n) raise "ContinueNode not implemented"; end
    def visit_ConstStatementNode(n) raise "ConstStatementNode not implemented"; end
    def visit_UnaryPlusNode(n) raise "UnaryPlusNode not implemented"; end
    def visit_VarStatementNode(n) raise "VarStatementNode not implemented"; end
    def visit_FunctionExprNode(n) raise "FunctionExprNode not implemented"; end
    def visit_BinaryNode(n) raise "BinaryNode not implemented"; end
    def visit_SubtractNode(n) raise "SubtractNode not implemented"; end
    def visit_LessOrEqualNode(n) raise "LessOrEqualNode not implemented"; end
    def visit_GreaterOrEqualNode(n) raise "GreaterOrEqualNode not implemented"; end
    def visit_AddNode(n) raise "AddNode not implemented"; end
    def visit_MultiplyNode(n) raise "MultiplyNode not implemented"; end
    def visit_NotEqualNode(n) raise "NotEqualNode not implemented"; end
    def visit_DoWhileNode(n) raise "DoWhileNode not implemented"; end
    def visit_SwitchNode(n) raise "SwitchNode not implemented"; end
    def visit_LogicalAndNode(n) raise "LogicalAndNode not implemented"; end
    def visit_UnsignedRightShiftNode(n) raise "UnsignedRightShiftNode not implemented"; end
    def visit_ModulusNode(n) raise "ModulusNode not implemented"; end
    def visit_WhileNode(n) raise "WhileNode not implemented"; end
    def visit_NotStrictEqualNode(n) raise "NotStrictEqualNode not implemented"; end
    def visit_LessNode(n) raise "LessNode not implemented"; end
    def visit_WithNode(n) raise "WithNode not implemented"; end
    def visit_InNode(n) raise "InNode not implemented"; end
    def visit_GreaterNode(n) raise "GreaterNode not implemented"; end
    def visit_BitOrNode(n) raise "BitOrNode not implemented"; end
    def visit_StrictEqualNode(n) raise "StrictEqualNode not implemented"; end
    def visit_LogicalOrNode(n) raise "LogicalOrNode not implemented"; end
    def visit_BitXOrNode(n) raise "BitXOrNode not implemented"; end
    def visit_LeftShiftNode(n) raise "LeftShiftNode not implemented"; end
    def visit_EqualNode(n) raise "EqualNode not implemented"; end
    def visit_BitAndNode(n) raise "BitAndNode not implemented"; end
    def visit_InstanceOfNode(n) raise "InstanceOfNode not implemented"; end
    def visit_DivideNode(n) raise "DivideNode not implemented"; end
    def visit_RightShiftNode(n) raise "RightShiftNode not implemented"; end
    def visit_BracketAccessorNode(n) raise "BracketAccessorNode not implemented"; end
    def visit_CaseClauseNode(n) raise "CaseClauseNode not implemented"; end
    def visit_CommaNode(n) raise "CommaNode not implemented"; end
    def visit_IfNode(n) raise "IfNode not implemented"; end
    def visit_ConditionalNode(n) raise "ConditionalNode not implemented"; end
    def visit_DotAccessorNode(n) raise "DotAccessorNode not implemented"; end
    def visit_ForInNode(n) raise "ForInNode not implemented"; end
    def visit_ForNode(n) raise "ForNode not implemented"; end
    def visit_FunctionCallNode(n) raise "FunctionCallNode not implemented"; end
    def visit_FunctionDeclNode(n) raise "FunctionDeclNode not implemented"; end
    def visit_LabelNode(n) raise "LabelNode not implemented"; end
    def visit_NewExprNode(n) raise "NewExprNode not implemented"; end
    def visit_OpEqualNode(n) raise "OpEqualNode not implemented"; end
    def visit_OpMultiplyEqualNode(n) raise "OpMultiplyEqualNode not implemented"; end
    def visit_OpDivideEqualNode(n) raise "OpDivideEqualNode not implemented"; end
    def visit_OpLShiftEqualNode(n) raise "OpLShiftEqualNode not implemented"; end
    def visit_OpMinusEqualNode(n) raise "OpMinusEqualNode not implemented"; end
    def visit_OpPlusEqualNode(n) raise "OpPlusEqualNode not implemented"; end
    def visit_OpModEqualNode(n) raise "OpModEqualNode not implemented"; end
    def visit_OpXOrEqualNode(n) raise "OpXOrEqualNode not implemented"; end
    def visit_OpRShiftEqualNode(n) raise "OpRShiftEqualNode not implemented"; end
    def visit_OpAndEqualNode(n) raise "OpAndEqualNode not implemented"; end
    def visit_OpURShiftEqualNode(n) raise "OpURShiftEqualNode not implemented"; end
    def visit_OpOrEqualNode(n) raise "OpOrEqualNode not implemented"; end
    def visit_PostfixNode(n) raise "PostfixNode not implemented"; end
    def visit_PrefixNode(n) raise "PrefixNode not implemented"; end
    def visit_PropertyNode(n) raise "PropertyNode not implemented"; end
    def visit_GetterPropertyNode(n) raise "GetterPropertyNode not implemented"; end
    def visit_SetterPropertyNode(n) raise "SetterPropertyNode not implemented"; end
    def visit_ResolveNode(n) raise "ResolveNode not implemented"; end
    def visit_TryNode(n) raise "TryNode not implemented"; end
    def visit_VarDeclNode(n) raise "VarDeclNode not implemented"; end
  end
end
